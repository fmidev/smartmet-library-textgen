/*!
\page page_lauseet Lauseiden rakentaminen

\section sec_lause_interface Peruskäyttö

TextGen::Paragraph on tekstiobjekti, josta lopullinen teksti
generoidaan.  TextGen::Paragraph koostuu listasta TextGen::Sentence
objekteja, joka puolestaan koostuu listasta polymorfisia
TextGen::Phrase objekteja.

TextGen::Phrase objekteihin kuuluvat esim. TextGen::PhraseWord, eli
sanakirjasta löytyvä sana, TextGen::PhraseNumber<T>, joka esittää
numeroa, ja TextGen::PhraseShortWeekday, joka kuvastaa viikonpäivää
lyhyessä muodossa.

Virkkeitä voi rakentaa seuraavaan tyyliin
\code
TextGen::TheDictionary::instance().dictionary(TextGen::DictionaryFactory::create("mysql"));
TextGen::TheDictionary::init("en");

TextGen::Sentence s;
s << TextGen::PhraseWord("kaakko");
s << TextGen::PhraseNumber<int>(12);
cout << s.realize();
\endcode
joka tulostaa tekstin "South east 12.". Esimerkissä on käytetty TextGen
namespacea eksplisiittisesti vain Doxygenin tähden, normaalisti
koodissa olisi jossain kohtaa
\code
using namespace TextGen;
\endcode
Koodi
\code
TextGen::Sentence s;
s << TextGen::PhraseWord("luode") << TextGen::PhraseNumber<float>(12.33333333333);
cout << s.realize();
\endcode
tulostaa "South east 12.3.", eli numeroilla on siis jonkinlainen
oletusarvoinen esitystarkkuus. Tarkkuutta voi muuttaa käyttämällä
TextGen::PhraseNumber luokan toista templaattiparametria traits-tyylisesti.

Stringeille ja integereille on olemassa oletusmuunnos TextGen::PhraseWord
ja TextGen::PhraseNumber<int> tyylisiksi, eli myös seuraava toimii.
\code
TextGen::Sentence s;
s << "kaakko" << 12;
cout << s.realize();
\endcode

Kokonaisia tekstejä luodaan seuraavasti
\code
TextGen::Paragraph p;
TextGen::Sentence s1;
s1 << "ke" << "kaakko" << 12;
TextGen::Sentence s2;
s2 << "to" << "luode" << 13;
p << s1 << s2;
cout << p.realize();
\endcode
joka tulostaisi "Wed south east 12. Thu north west 13.".
Seuraava koodi voi kuitenkin olla käytännöllisempää, koska
viikonpäivätekstiä ei tarvitse itse laskea.
\code
TextGen::Paragraph p;
TextGen::Sentence s1;
s1 << TextGen::PhraseShortWeekday(3) << "kaakko" << 12;
Sentence s2;
s2 << TextGen::PhraseShortWeekday(4) << "luode" << 13;
p << s1 << s2;
cout << p.realize();
\endcode
Viikonpäivien numerointi on tässä sama kuin newbase kirjaston
aikaluokissa.

\section sec_edistyneet_numerot Numeroiden modifiointi

TextGen::PhraseNumber on templaatti, joka ottaa argumenttina
sekä esitetyn luvun tyypin, että policy-luokan, jossa on
staattinen tostring metodi konversiota varten.

Esimerkiksi integerit ovat käytännössä luokka
\code
PhraseNumber<int, DefaultNumberTraits<int> >
\endcode
missä oletusarovinen DefaultNumberTraits on
\code
template <typename Value>
struct DefaultNumberTraits
{
      static std::string tostring(const Value & theValue)
      {
        std::ostringstream os;
        os << theValue;
        return os.str();
      }
};
\endcode
Integerit tulostuvat siis normaalisti, kuten suurin osa muistakin
tyypeistä.

Float ja double tyypit ovat spesialisoituja templaatteja, esim.
\code
template <>
struct DefaultNumberTraits<float>
{
      static std::string tostring(float theValue)
      {
        std::ostringstream os;
        os << std::fixed << std::setprecision(1) << theValue;
        std::string ret = os.str();
        if(ret.size() > 2)
              if(ret.substr(ret.size()-2,2) == ".0")
                return ret.substr(0,ret.size()-2);
        return ret;
      }
};
\endcode
Floatit tulostuvat siis yhden desimaalin tarkkuudella, mutta mahdollinen
".0" loppu karsitaan pois.

Omien numerotyyppien määrittely onnistuu määrittelemällä sopiva
traits-luokka, sekä tekemällä sopiva typedef käytön helpottamiseksi.
Esimerkiksi alla on traits-luokka, joka soveltuu tuulen suunnan
pyöristämiseen lähimpään 45 asteeseen.
\code
template <typename Value, int Mult>
struct WindDirectionTraits
{
      static std::string tostring(const Value & theValue)
      {
        std::ostringstream os;
        int value = static_cast<int>(std::floor(theValue/Mult+0.5)*Mult);
        value %= 360;
        os << value;
        return os.str();
      }
};
\endcode
Esimerkiksi seuraava koodi tulostaa lukemat 45 ja 0.
\code
typedef TextGen::PhraseNumber<float, WindDirectionTraits<float,45> > PhraseWDir45

cout << PhraseWDir45(30).realize() << endl
     << PhraseWDir45(359).realize() << endl;
\endcode

*/
